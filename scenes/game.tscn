[gd_scene load_steps=12 format=3 uid="uid://da6y27vlqx8cx"]

[ext_resource type="Script" path="res://scenes/game.gd" id="1_jq20o"]
[ext_resource type="PackedScene" uid="uid://dgna7p5elvtjm" path="res://scenes/player.tscn" id="2_vpfdv"]
[ext_resource type="AudioStream" uid="uid://brnxdxnd5u3yi" path="res://music/jungle_theme.ogg" id="3_x4xuy"]

[sub_resource type="GDScript" id="GDScript_qm63g"]
resource_name = "Minimap"
script/source = "# The minimap panel. It draws a 3x3 minimap with player's position in the center. Note that the position is drawn differently from the MetSys player position.
extends Panel

# The cell coords in the center.
var current_cell: Vector2i

func _ready() -> void:
	# Set minimum size to 3 times the cell size.
	custom_minimum_size = MetSys.CELL_SIZE * 3
	# Reset position after setting size.
	set_anchors_and_offsets_preset(Control.PRESET_TOP_RIGHT, Control.PRESET_MODE_MINSIZE, 16)
	# Same for the center rect, which indicates current position.
	$ColorRect.custom_minimum_size = MetSys.CELL_SIZE
	$ColorRect.set_anchors_and_offsets_preset(Control.PRESET_CENTER)
	
	# Connect signals.
	MetSys.map_updated.connect(queue_redraw)
	MetSys.cell_changed.connect(on_cell_changed)

func on_cell_changed(new_cell: Vector3i):
	# On cell changed update the position and redraw.
	current_cell = Vector2i(new_cell.x, new_cell.y)
	queue_redraw()

func _draw() -> void:
	# Draw the 3x3 cells, i.e. (-1, -1) to (1, 1).
	for x in range(-1, 2):
		for y in range(-1, 2):
			# Draw the cell.
			MetSys.draw_cell(self, Vector2i(x + 1, y + 1), Vector3i(current_cell.x + x, current_cell.y + y, MetSys.current_layer))
	
	# Draw shared borders, if used by the theme.
	if MetSys.settings.theme.use_shared_borders:
		MetSys.draw_shared_borders()
	# Draw custom elements.
	MetSys.draw_custom_elements(self, Rect2i(current_cell.x - 1, current_cell.y - 1, 3, 3))

func _input(event: InputEvent) -> void:
	# Toggle visibility when pressing M.
	if event is InputEventKey:
		if event.pressed:
			if event.keycode == KEY_M:
				visible = not visible
"

[sub_resource type="Animation" id="Animation_lgykt"]
resource_name = "Flash"
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.5),
"transitions": PackedFloat32Array(0.5, 2),
"update": 0,
"values": [Color(1, 1, 1, 0.752941), Color(1, 1, 1, 0)]
}

[sub_resource type="Animation" id="Animation_0p0d4"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 0.752941)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_kkw8m"]
_data = {
"Flash": SubResource("Animation_lgykt"),
"RESET": SubResource("Animation_0p0d4")
}

[sub_resource type="GDScript" id="GDScript_3j3ex"]
resource_name = "MapWindow"
script/source = "# The window that contains a bigger map overview than minimap. Toggled with M.
extends Panel

# The size of the window in cells.
var SIZE: Vector2i

# The position where the player started (for the vector feature).
var starting_coords: Vector2i
# The offset for drawing the cells. Allows map panning.
var offset: Vector2i
# The player location node from MetSys.add_player_location()
var player_location: Node2D
# The vector feature, toggled with D. It displays an arrow from player's starting point to the current position.
# It's purely to show custom drawing on the map.
var show_delta: bool

func _ready() -> void:
	# Cellular size is total size divided by cell size.
	SIZE = size / MetSys.CELL_SIZE
	# Connect some signals.
	MetSys.cell_changed.connect(queue_redraw.unbind(1))
	MetSys.cell_changed.connect(update_offset.unbind(1)) # When player moves to another cell, move the map.
	MetSys.map_updated.connect(queue_redraw)
	# Create player location. We need a reference to update its offset.
	player_location = MetSys.add_player_location(self)

func _draw() -> void:
	for x in SIZE.x:
		for y in SIZE.y:
			# Draw cells. Note how offset is used.
			MetSys.draw_cell(self, Vector2i(x, y), Vector3i(x - offset.x, y - offset.y, MetSys.current_layer))
	# Draw shared borders and custom elements.
	if MetSys.settings.theme.use_shared_borders:
		MetSys.draw_shared_borders()
	MetSys.draw_custom_elements(self, Rect2i(-offset.x, -offset.y, SIZE.x, SIZE.y))
	# Get the current player coordinates.
	var coords := MetSys.get_current_flat_coords()
	# If the delta vector (D) is enabled and player isn't on the starting position...
	if show_delta and coords != starting_coords:
		var start_pos := MetSys.get_cell_position(starting_coords + offset)
		var current_pos := MetSys.get_cell_position(coords + offset)
		# draw the vector...
		draw_line(start_pos, current_pos, Color.WHITE, 2)
		
		const arrow_size = 4
		# and arrow. This code shows how to draw custom stuff on the map outside the MetSys functions.
		draw_set_transform(current_pos, start_pos.angle_to_point(current_pos), Vector2.ONE)
		draw_primitive([Vector2(-arrow_size, -arrow_size), Vector2(arrow_size, 0), Vector2(-arrow_size, arrow_size)], [Color.WHITE], [])

func _input(event: InputEvent) -> void:
	if event is InputEventKey:
		if event.pressed:
			# Toggle visibility when pressing M.
			if event.keycode == KEY_M:
				visible = not visible
				if visible:
					update_offset()
			elif event.keycode == KEY_D:
				# D toggles position tracking (delta vector).
				show_delta = not show_delta
				queue_redraw()

func update_offset():
	# Update the map offset based on the current position.
	# Normally the offset is interactive and the player is able to move freely around the map.
	# But in this demo, the map can overlay the game and thus is updated in real time.
	offset = -MetSys.get_current_flat_coords() + SIZE / 2
	player_location.offset = Vector2(offset) * MetSys.CELL_SIZE

func reset_starting_coords():
	# Starting position for the delta vector.
	var coords := MetSys.get_current_flat_coords()
	starting_coords = Vector2i(coords.x, coords.y)
	queue_redraw()
"

[sub_resource type="GDScript" id="GDScript_88ws2"]
resource_name = "PercentLabel"
script/source = "# Displays map completion percentage
extends Label

func _ready() -> void:
	# The percentage may change when map is updated.
	MetSys.map_updated.connect(update)

func _notification(what: int) -> void:
	# Update when the label is made visible. This happens when the map is toggled.
	if what == NOTIFICATION_VISIBILITY_CHANGED:
		update()

func update():
	# Only update when visible.
	if is_visible_in_tree():
		# Show the percentage.
		text = \"%03d%%\" % int(MetSys.get_explored_ratio() * 100)
"

[sub_resource type="Gradient" id="Gradient_i0ait"]
offsets = PackedFloat32Array(0, 0.300546, 0.568306)
colors = PackedColorArray(1.15514e-06, 0.518514, 0.510531, 1, 0.317647, 0.670588, 0.666667, 1, 1, 1, 1, 0)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_m122b"]
gradient = SubResource("Gradient_i0ait")
fill = 1
fill_from = Vector2(0.5, 0.5)

[node name="Game" type="Node2D"]
texture_filter = 1
script = ExtResource("1_jq20o")
starting_map = "forest_test.tscn"
metadata/_edit_vertical_guides_ = [432.0]
metadata/_edit_horizontal_guides_ = [240.0]

[node name="MapContainer" type="Node2D" parent="."]

[node name="Player" parent="." instance=ExtResource("2_vpfdv")]
position = Vector2(168, 634)

[node name="MusicPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource("3_x4xuy")
autoplay = true
bus = &"Music"

[node name="UI" type="CanvasLayer" parent="."]

[node name="Minimap" type="Panel" parent="UI"]
clip_contents = true
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -112.0
offset_top = 16.0
offset_right = -16.0
offset_bottom = 112.0
grow_horizontal = 0
script = SubResource("GDScript_qm63g")

[node name="ColorRect" type="ColorRect" parent="UI/Minimap"]
modulate = Color(1, 1, 1, 0.752941)
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -16.0
offset_top = -16.0
offset_right = 16.0
offset_bottom = 16.0
grow_horizontal = 2
grow_vertical = 2

[node name="AnimationPlayer" type="AnimationPlayer" parent="UI/Minimap/ColorRect"]
libraries = {
"": SubResource("AnimationLibrary_kkw8m")
}
autoplay = "Flash"

[node name="MapWindow" type="Panel" parent="UI"]
visible = false
clip_contents = true
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -240.0
offset_top = -160.0
offset_right = 240.0
offset_bottom = 160.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_3j3ex")

[node name="Percent" type="Label" parent="UI/MapWindow"]
layout_mode = 0
offset_right = 40.0
offset_bottom = 23.0
text = "0%"
script = SubResource("GDScript_88ws2")

[node name="Label" type="Label" parent="UI/MapWindow"]
layout_mode = 1
anchors_preset = 2
anchor_top = 1.0
anchor_bottom = 1.0
offset_top = -23.0
offset_right = 40.0
grow_vertical = 0
text = "Press D to toggle delta vector"

[node name="HBoxContainer" type="HBoxContainer" parent="UI"]
offset_left = 19.0
offset_top = 51.0
offset_right = 59.0
offset_bottom = 77.0

[node name="TextureRect" type="TextureRect" parent="UI/HBoxContainer"]
layout_mode = 2
texture = SubResource("GradientTexture2D_m122b")
expand_mode = 2
stretch_mode = 5

[node name="CollectibleCount" type="Label" parent="UI/HBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
text = "0"
vertical_alignment = 1
